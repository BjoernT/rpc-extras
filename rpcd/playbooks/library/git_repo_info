#!/usr/bin/env python
# Copyright 2015, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = """
---
module: git_repo_info
short_description:
    - A module for gathering git repo facts.
description:
    - A module for gathering git repo facts.
author: Rcbops
options:
  path:
    description:
      - The path to the repo.
    required: true
  name:
    description:
      - The name to use when referencing the repo.
    required: false
    default: The repo directory in path.
  closest_tag:
    description:
      - By default it will cause the version returned to be the tag closest to
        HEAD. If set to false the version will take the form
        closest_tag-number_of_commits_from_closest_tag-current_SHA.
    required: false
    default: true
"""

EXAMPLES = """
- name: Discover current rpc-openstack release
  git_repo_info:
    path: "/opt/rpc-openstack"
  delegate_to: localhost
  run_once: true

In the above example a variable called 'rpc_openstack_repo' is added to the
global ansible namespace and has the following form:

rpc_openstack_repo:
  name: rpc-openstack
  sha: bbd50f3908e38acae3d96e12989394ace234c94d
  version: 1.2.3

name is the repo name unless supplied in the task definition
sha is the current HEAD for the repo
version is the most recent tag reached from HEAD
"""

import os.path
import subprocess


class GitRepoFacts(object):
    def __init__(self, module):
        self.state_change = False
        self.module = module
        self.params = self.module.params

    def gather_facts(self):
        """Get information about RPC release."""
        repo = {}
        repo['version'], repo['sha'] = self.get_repo_version()
        repo['name'] = (self.params['name'] or
                        os.path.split(self.params['path'])[-1])
        name = '%s_repo' % (repo['name'].replace('-', '_'))
        self.module.exit_json(
            ansible_facts={name: repo})

    def run_command(self, cmd, cwd):
        try:
            output = subprocess.check_output(cmd,
                                             stderr=subprocess.STDOUT,
                                             cwd=cwd)
        except subprocess.CalledProcessError as e:
            message = ('Repo fact collection failed: "%s".' %
                       e.output.strip())
            self.module.fail_json(msg=message)
        else:
            return output.strip()

    def get_repo_version(self):
        cmd = ['git', 'describe', '--tags', '--long', '--abbrev=40']
        output = self.run_command(cmd, self.params['path'])
        newest_tag, additional_commits, current_commit = output.rsplit('-', 2)
        if self.params['closest_tag'] or additional_commits == '0':
            tag = newest_tag
        else:
            tag = output
        return tag, current_commit.lstrip('g')


def main():
    module = AnsibleModule(
        argument_spec={
            'path': {'type': 'str', 'required': True},
            'name': {'type': 'str', 'default': None, 'required': False},
            'closest_tag': {'type': 'bool', 'default': True, 'required': False}
        },
        supports_check_mode=False
    )
    repo_facts = GitRepoFacts(module)
    repo_facts.gather_facts()

from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
